namespace {{rootNamespace}}.{{domain.Name}}
{
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Represents an adapter for the {{domain.Name}} domain to simplify the command interface.
    /// </summary>
    public class {{#dehumanize}}{{domain.Name}}{{/dehumanize}}Adapter
    {
        private readonly ChromeSession m_session;
        
        public {{#dehumanize}}{{domain.Name}}{{/dehumanize}}Adapter(ChromeSession session)
        {
            m_session = session ?? throw new ArgumentNullException(nameof(session));
        }

        /// <summary>
        /// Gets the ChromeSession associated with the adapter.
        /// </summary>
        public ChromeSession Session
        {
            get { return m_session; }
        }

    {{#each domain.Commands}}
        /// <summary>
        /// {{Description}}
        /// </summary>
        public async Task<{{#dehumanize}}{{Name}}CommandResponse{{/dehumanize}}> {{#dehumanize}}{{Name}}{{/dehumanize}}({{#dehumanize}}{{Name}}Command{{/dehumanize}} command, int? millisecondsTimeout = null, bool throwExceptionIfResponseNotReceived = true)
        {
            return await m_session.SendCommand<{{#dehumanize}}{{Name}}{{/dehumanize}}Command, {{#dehumanize}}{{Name}}{{/dehumanize}}CommandResponse>(command, millisecondsTimeout, throwExceptionIfResponseNotReceived);
        }
    {{/each}}

    {{#each domain.Events}}
        /// <summary>
        /// {{Description}}
        /// </summary>
        public void SubscribeTo{{#dehumanize}}{{Name}}{{/dehumanize}}Event(Action<{{#dehumanize}}{{Name}}{{/dehumanize}}Event> eventCallback)
        {
            m_session.Subscribe(eventCallback);
        }
    {{/each}}
    }
}