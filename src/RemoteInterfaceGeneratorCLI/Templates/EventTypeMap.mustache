namespace {{rootNamespace}}{{#newline}}
{{{#newline}}
    using System;{{#newline}}
    using System.Collections.Generic;{{#newline}}
{{#newline}}
    public static class EventTypeMap{{#newline}}
    {{{#newline}}
        private readonly static IDictionary<string, Type> s_methodNameEventTypeDictionary;{{#newline}}
        private readonly static IDictionary<Type, string> s_eventTypeMethodNameDictionary;{{#newline}}
{{#newline}}
        static EventTypeMap(){{#newline}}
        {{{#newline}}
            s_methodNameEventTypeDictionary = new Dictionary<string, Type>(){{#newline}}
            {{{#newline}}
{{#each events}}
                { "{{EventName}}", typeof({{FullTypeName}}) },{{#newline}}
{{/each}}
            };{{#newline}}
{{#newline}}
            s_eventTypeMethodNameDictionary = new Dictionary<Type, string>(){{#newline}}
            {{{#newline}}
{{#each events}}
                { typeof({{FullTypeName}}), "{{EventName}}" },{{#newline}}
{{/each}}
            };{{#newline}}
        }{{#newline}}
{{#newline}}
        /// <summary>{{#newline}}
        /// Gets the event type corresponding to the specified method name.{{#newline}}
        /// </summary>{{#newline}}
        public static bool TryGetTypeForMethodName(string methodName, out Type eventType){{#newline}}
        {{{#newline}}
            return s_methodNameEventTypeDictionary.TryGetValue(methodName, out eventType);{{#newline}}
        }{{#newline}}
{{#newline}}
        /// <summary>{{#newline}}
        /// Gets the method name corresponding to the specified event type.{{#newline}}
        /// </summary>{{#newline}}
        public static bool TryGetMethodNameForType<TEvent>(out string methodName){{#newline}}
            where TEvent : IEvent{{#newline}}
        {{{#newline}}
            return s_eventTypeMethodNameDictionary.TryGetValue(typeof(TEvent), out methodName);{{#newline}}
        }{{#newline}}
    }{{#newline}}
}{{#newline}}